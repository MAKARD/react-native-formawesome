// @flow

type UncertainObject = {
    [key: string]: any
}

interface Schema {
    name: string;
    properties: UncertainObject;
}

interface Validator {
    modelName: string;
    modelValues: UncertainObject;
    modelErrors: UncertainObject;
    modelAttributes: Array<string>;

    dropToDefaults: () => void;
    setDefaults: (defaults: UncertainObject) => void;
    validate: (groups: ?Array<string>) => Promise<void>;
    setModelValue: (attribute: string, value: any) => void;
    addErrors: (errors: Array<{attribute: string; details: string}>) => void; 
}

interface InstantiableValidator<P> {
    constructor(target: P, defaults: ?UncertainObject): Validator;
}

interface FormProviderProps {
    validator: Validator;
    onSubmit: () => Promise<any>;
    errorPareser: ?(error: any) => boolean;
}

type Event = "change" | "focus" | "blur";

interface FormGroupProviderProps {
    attribute: string;
    validateOn: ?Event | ?((values: UncertainObject, errors: UncertainObject) => boolean);
}

declare export var FormProviderPropTypes: $Subtype<{[_: $Keys<FormProviderProps>]: any}>;
declare export var FormGroupProviderPropTypes: $Subtype<{[_: $Keys<FormGroupProviderProps>]: any}>;

declare export var ModelValidator: Class<InstantiableValidator<Class<UncertainObject>>>;
declare export var SchemaValidator: Class<InstantiableValidator<Schema>>;

declare export var FormProvider: Class<React$Component<FormProviderProps>>;

declare export var FormGroupProvider: Class<React$Component<FormGroupProviderProps>>;
